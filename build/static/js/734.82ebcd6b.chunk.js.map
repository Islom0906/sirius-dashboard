{"version":3,"file":"static/js/734.82ebcd6b.chunk.js","mappings":"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","sources":["pages/sample/Banner/BannerPostEdit.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, Input, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport ImgCrop from \"antd-img-crop\";\n\nconst initialValueForm = {\n    url: \"\",\n    image:[]\n};\n\n\n\n\nconst BannerPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n    // query-banner\n    const {\n        mutate: postBannerMutate,\n        data: postBanner,\n        isLoading: postBannerLoading,\n        isSuccess: postBannerSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editBannerLoading,\n        data: editBannerData,\n        refetch: editBannerRefetch,\n        isSuccess: editBannerSuccess,\n    } = useQuery([\"edit-banner\", editId], () => apiService.getDataByID(\"/about/header-banner\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putBanner,\n        isLoading: putBannerLoading,\n        data: putData,\n        isSuccess: putBannerSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // banner success\n    useEffect(() => {\n        if (putBannerSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postBannerSuccess || putBannerSuccess) {\n\n            navigate('/banner')\n        }\n    }, [postBanner, putData])\n\n\n    // if edit contact\n    useEffect(() => {\n        if (editId !== \"\") {\n            editBannerRefetch();\n        }\n    }, [editId]);\n\n    // if no edit banner\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit banner\n    useEffect(() => {\n        if (editBannerSuccess) {\n\n            const image=[{\n                uid: editBannerData.id,\n                name: editBannerData.id,\n                status: \"done\",\n                url: editBannerData.image\n            }];\n\n\n            const edit = {\n                url: editBannerData.url.split('//')[1],\n                image\n            }\n\n            setFileListProps(image)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editBannerData])\n\n\n    const onFinish = (values) => {\n\n\n        const formData = new FormData();\n\n        formData.append('url', `https://${values.url}`);\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n        if (editBannerData) {\n            putBanner({url: '/about/header-banner', data: formData, id: editId})\n        } else {\n            postBannerMutate({url: \"/about/header-banner/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n    const onChange = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n    return (\n        <div>\n            {(postBannerLoading || editBannerLoading || putBannerLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Ссылка на баннер\"\n                                name=\"url\"\n                                rules={[{required: true, message: 'Требуется Ссылка на баннер'}]}\n                            >\n                                <Input addonBefore={'https://'}/>\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label='Изображение баннера'\n                                name={'image'}\n                                rules={[{required: true, message: 'Требуется изображение баннера.'}]}>\n                                <ImgCrop rotationSlider>\n                                    <Upload\n                                        maxCount={1}\n                                        fileList={fileListProps}\n                                        listType='picture-card'\n                                        onChange={onChange}\n                                        onPreview={onPreview}\n                                        beforeUpload={() => false}\n                                    >\n                                        {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                    </Upload>\n                                </ImgCrop>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editBannerSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default BannerPostEdit;"],"names":["initialValueForm","url","image","BannerPostEdit","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postBannerMutate","data","postBanner","isLoading","postBannerLoading","isSuccess","postBannerSuccess","useMutation","_ref","apiService","postData","onSuccess","message","success","onError","error","obj","response","concat","editBannerLoading","editBannerData","refetch","editBannerRefetch","editBannerSuccess","useQuery","getDataByID","enabled","putBanner","putBannerLoading","putData","putBannerSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","uid","name","status","edit","split","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_jsx","children","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","label","rules","required","Input","addonBefore","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}