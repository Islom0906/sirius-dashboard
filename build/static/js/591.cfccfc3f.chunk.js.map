{"version":3,"file":"static/js/591.cfccfc3f.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/Stock/StockPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect,  } from 'react';\nimport {Button, Col, Form, message, Row, } from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\n\nconst initialValueForm = {\n    title_ru: \"\",\n    title_uz:\"\"\n};\n\n\nconst StockPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n\n\n    // query-stock\n    const {\n        mutate: postStockMutate,\n        data: postStock,\n        isLoading: postStockLoading,\n        isSuccess: postStockSuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editStockLoading,\n        data: editStockData,\n        refetch: editStockRefetch,\n        isSuccess: editStockSuccess,\n\n    } = useQuery([\"edit-stock\", editId], () => apiService.getDataByID(\"/stocks\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putStock,\n        isLoading: putStockLoading,\n        data: putData,\n        isSuccess: putStockSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    //                                              =====useEffect====\n\n    // stock success\n    useEffect(() => {\n        if (putStockSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postStockSuccess || putStockSuccess) {\n            navigate('/stock')\n        }\n    }, [postStock, putData])\n\n    // if edit stock\n    useEffect(() => {\n        if (editId !== \"\") {\n            editStockRefetch();\n        }\n    }, [editId]);\n\n    // if no edit stock\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit stock\n    useEffect(() => {\n\n\n        if (editStockSuccess) {\n\n            const edit = {\n                title_ru: editStockData.title_ru,\n                title_uz: editStockData.title_uz,\n\n            }\n\n            form.setFieldsValue(edit)\n        }\n\n    }, [editStockData])\n    const onFinish = (values) => {\n\n        const formData = new FormData()\n\n        formData.append('title_ru', values.title_ru);\n        formData.append('title_uz', values.title_uz);\n\n\n\n        if (editStockSuccess) {\n            putStock({url: \"/stocks\", data: formData, id: editId});\n        } else {\n            postStockMutate({url: \"/stocks/\", data: formData});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n    return (\n        <div>\n            {(postStockLoading || editStockLoading || putStockLoading) ? <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n\n\n                    <Row gutter={20}>\n\n\n\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Требуется тип действия'}\n                                label={'Введите тип продвижения'}\n                                name={'title_ru'}\n                            />\n\n\n                        </Col>\n\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Aksiyasini turi kiritish talab qilinadi'}\n                                label={'Aksiyasini turini kiriting'}\n                                name={'title_uz'}\n                            />\n\n\n                        </Col>\n\n                    </Row>\n\n\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {editStockSuccess ? 'Edit' : 'Add'}\n                    </Button>\n                </Form>}\n        </div>);\n};\n\nexport default StockPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","title_ru","title_uz","StockPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","mutate","postStockMutate","data","postStock","isLoading","postStockLoading","isSuccess","postStockSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editStockLoading","editStockData","refetch","editStockRefetch","editStockSuccess","useQuery","getDataByID","enabled","putStock","putStockLoading","putData","putStockSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","formData","FormData","append","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","Button","htmlType","width","marginTop"],"sourceRoot":""}