{"version":3,"file":"static/js/732.6dfb0715.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/SubCategory/SubCategoryPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useMemo} from 'react';\nimport {Button, Col, Form, message, Row, Select} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n    category:null,\n};\n\n\n\n\nconst SubCategoryPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n    // query-category-get\n    const {data: categoryData, refetch: categoryFetch} = useQuery(\n        'get-category',\n        () => apiService.getData('/categories/'),\n        {\n            enabled: false,\n        },\n    );\n\n    // query-sub-category\n    const {\n        mutate: postSubCategoryMutate,\n        data: postSubCategory,\n        isLoading: postSubCategoryLoading,\n        isSuccess: postSubCategorySuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editSubCategoryLoading,\n        data: editSubCategoryData,\n        refetch: editSubCategoryRefetch,\n        isSuccess: editSubCategorySuccess,\n    } = useQuery([\"edit-sub-category\", editId], () => apiService.getDataByID(\"/sub_categories\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putSubCategory,\n        isLoading: putSubCategoryLoading,\n        data: putData,\n        isSuccess: putSubCategorySuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // sub-category success\n    useEffect(() => {\n        if (putSubCategorySuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postSubCategorySuccess || putSubCategorySuccess) {\n\n            navigate('/sub-category')\n        }\n    }, [postSubCategory, putData])\n\n\n    // if edit sub-category\n    useEffect(() => {\n        if (editId !== \"\") {\n            editSubCategoryRefetch();\n        }\n    }, [editId]);\n\n    // if no edit cate\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n        categoryFetch()\n    }, []);\n\n\n    //edit sub-category\n    useEffect(() => {\n        if (editSubCategorySuccess) {\n            const edit = {\n                title_uz: editSubCategoryData.title_uz,\n                title_ru: editSubCategoryData.title_ru,\n                category: editSubCategoryData.categories.id,\n            }\n            form.setFieldsValue(edit)\n        }\n\n    }, [editSubCategoryData])\n\n\n    const onFinish = (values) => {\n\n\n        if (editSubCategoryData) {\n            putSubCategory({url: '/sub_categories', data: values, id: editId})\n        } else {\n            postSubCategoryMutate({url: \"/sub_categories/\", data: values});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n    // option category\n    const optionsCategory = useMemo(() => {\n        return categoryData?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [categoryData]);\n\n\n    return (\n        <div>\n            {(postSubCategoryLoading || editSubCategoryLoading || putSubCategoryLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Qo\\'shimcha kategoriya kiritishingiz kerak'}\n                                label={'Qo\\'shimcha kategoriya'}\n                                name={'title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Вы должны ввести дополнительная категория'}\n                                label={'Дополнительная категория Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n                        <Col span={24}>\n                            <Form.Item\n                                label={'Выберите категория'}\n                                name={'category'}\n                                rules={[{\n                                    required: true, message: 'Страну должны быть выбраны'\n                                }]}\n                                wrapperCol={{\n                                    span: 24,\n                                }}\n                            >\n                                <Select\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    placeholder='Выберите одну категория'\n                                    optionLabelProp='label'\n                                    options={optionsCategory}\n                                />\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editSubCategorySuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default SubCategoryPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","title_uz","title_ru","category","SubCategoryPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","data","categoryData","refetch","categoryFetch","useQuery","apiService","getData","enabled","mutate","postSubCategoryMutate","postSubCategory","isLoading","postSubCategoryLoading","isSuccess","postSubCategorySuccess","useMutation","url","postData","onSuccess","success","onError","error","obj","response","concat","editSubCategoryLoading","editSubCategoryData","editSubCategoryRefetch","editSubCategorySuccess","getDataByID","putSubCategory","putSubCategoryLoading","putData","putSubCategorySuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","categories","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","optionsCategory","useMemo","map","option","value","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","Select","width","placeholder","optionLabelProp","options","Button","htmlType","marginTop"],"sourceRoot":""}