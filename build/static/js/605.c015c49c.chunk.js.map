{"version":3,"file":"static/js/605.c015c49c.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormTextArea.jsx","pages/sample/Service/ServicePostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport PropTypes from \"prop-types\";\n\nconst FormTextArea = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n    );\n};\n\nexport default FormTextArea;\n\nFormTextArea.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport ImgCrop from \"antd-img-crop\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormTextArea from \"../../../@crema/core/Form/FormTextArea\";\n\n\n\n\nconst initialValueForm = {\n    image: [],\n    title_uz: \"\",\n    title_ru: \"\",\n    sub_title_uz: \"\",\n    sub_title_ru: \"\",\n};\n\n\nconst ServicePostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n\n\n    // query-about\n    const {\n        mutate: postServiceMutate,\n        data: postService,\n        isLoading: postServiceLoading,\n        isSuccess: postServiceSuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editServiceLoading,\n        data: editServiceData,\n        refetch: editServiceRefetch,\n        isSuccess: editServiceSuccess,\n\n    } = useQuery([\"edit-service\", editId], () => apiService.getDataByID(\"/about/services\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putService, isLoading: putServiceLoading, data: putData, isSuccess: putServiceSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // delete image\n\n\n    //                                              =====useEffect====\n\n    // service success\n    useEffect(() => {\n        if (putServiceSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postServiceSuccess || putServiceSuccess) {\n            navigate('/service')\n        }\n    }, [postService, putData])\n\n    // if edit service\n    useEffect(() => {\n        if (editId !== \"\") {\n            editServiceRefetch();\n        }\n    }, [editId]);\n\n    // if no edit service\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit service\n    useEffect(() => {\n        const imageInitialMain = [{\n            uid: editServiceData?.id,\n            name: editServiceData?.id,\n            status: 'done',\n            url: editServiceData?.image,\n        }];\n\n        if (editServiceSuccess) {\n\n            const edit = {\n                image: imageInitialMain,\n                title_uz: editServiceData.title_uz,\n                title_ru: editServiceData.title_ru,\n                sub_title_uz: editServiceData.sub_title_uz,\n                sub_title_ru: editServiceData.sub_title_ru,\n\n            }\n\n            setFileListProps(imageInitialMain);\n            form.setFieldsValue(edit)\n        }\n\n    }, [editServiceData])\n    const onFinish = (values) => {\n\n        const formData=new FormData()\n\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_ru', values.title_ru);\n        formData.append('sub_title_uz', values.sub_title_uz);\n        formData.append('sub_title_ru', values.sub_title_ru);\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n\n        if (editServiceSuccess) {\n            putService({url: \"/about/services\", data:formData, id: editId});\n        } else {\n            postServiceMutate({url: \"/about/services/\", data:formData});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n\n    const onChangeMainImage = ({fileList: newFileList}) => {\n\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n\n    return (\n        <div>\n        {(postServiceLoading || editServiceLoading || putServiceLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Sarlavha talab qilinadi'}\n                            label={'Sarlavha Uz'}\n                            name={'title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Необходимо ввести заголовок'}\n                            label={'Заголовок Ru'}\n                            name={'title_ru'}\n                        />\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Qo\\'shimcha sarlavha kiritish talab qilinada'}\n                            label={'Qo\\'shimcha sarlavha Uz'}\n                            name={'sub_title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormTextArea\n                            required={true} required_text={'Требуется дополнительный заголовок'}\n                            label={'Дополнительное название Ru'}\n                            name={'sub_title_ru'}\n                        />\n\n                    </Col>\n                </Row>\n\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение основной'\n                            name={'image'}\n                            rules={[{required: true, message: 'Изображение баннера должно быть загружено.'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeMainImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editServiceSuccess ? 'Edit' : 'Add'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default ServicePostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","TextArea","rows","initialValueForm","image","title_uz","title_ru","sub_title_uz","sub_title_ru","ServicePostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postServiceMutate","data","postService","isLoading","postServiceLoading","isSuccess","postServiceSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editServiceLoading","editServiceData","refetch","editServiceRefetch","editServiceSuccess","useQuery","getDataByID","enabled","putService","putServiceLoading","putData","putServiceSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","imageInitialMain","uid","status","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormTextArea","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}