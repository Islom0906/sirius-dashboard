{"version":3,"file":"static/js/732.8d607c25.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/SubCategory/SubCategoryPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useMemo} from 'react';\nimport {Button, Col, Form, message, Row, Select} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n    category:null,\n    brand:[]\n};\n\n\n\n\nconst SubCategoryPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n    // query-category-get\n    const {data: categoryData, refetch: categoryFetch} = useQuery(\n        'get-category',\n        () => apiService.getData('/categories/'),\n        {\n            enabled: false,\n        },\n    );\n\n    // query-brand-get\n    const {data: brandData, refetch: brandFetch} = useQuery(\n        'get-brand',\n        () => apiService.getData('/brands/'),\n        {\n            enabled: false,\n        },\n    );\n\n    // query-sub-category\n    const {\n        mutate: postSubCategoryMutate,\n        data: postSubCategory,\n        isLoading: postSubCategoryLoading,\n        isSuccess: postSubCategorySuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editSubCategoryLoading,\n        data: editSubCategoryData,\n        refetch: editSubCategoryRefetch,\n        isSuccess: editSubCategorySuccess,\n    } = useQuery([\"edit-sub-category\", editId], () => apiService.getDataByID(\"/sub_categories\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putSubCategory,\n        isLoading: putSubCategoryLoading,\n        data: putData,\n        isSuccess: putSubCategorySuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // sub-category success\n    useEffect(() => {\n        if (putSubCategorySuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postSubCategorySuccess || putSubCategorySuccess) {\n\n            navigate('/sub-category')\n        }\n    }, [postSubCategory, putData])\n\n\n    // if edit sub-category\n    useEffect(() => {\n        if (editId !== \"\") {\n            editSubCategoryRefetch();\n        }\n    }, [editId]);\n\n    // if no edit cate\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n        categoryFetch()\n        brandFetch()\n    }, []);\n\n\n    //edit sub-category\n    useEffect(() => {\n        const brand=[]\n        if (editSubCategorySuccess) {\n\n            editSubCategoryData?.brands?.map((item)=>{\n                brand.push(item?.id)\n            })\n\n            const edit = {\n                title_uz: editSubCategoryData.title_uz,\n                title_ru: editSubCategoryData.title_ru,\n                category: editSubCategoryData.categories.id,\n                brand\n            }\n            console.log(edit)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editSubCategoryData])\n\n\n    const onFinish = (values) => {\n\n\n        if (editSubCategoryData) {\n            putSubCategory({url: '/sub_categories', data: values, id: editId})\n        } else {\n            postSubCategoryMutate({url: \"/sub_categories/\", data: values});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n    // option category\n    const optionsCategory = useMemo(() => {\n        return categoryData?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [categoryData]);\n\n    // option brands\n    const optionsBrand = useMemo(() => {\n        return brandData?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [brandData]);\n\n    return (\n        <div>\n            {(postSubCategoryLoading || editSubCategoryLoading || putSubCategoryLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Qo\\'shimcha kategoriya kiritishingiz kerak'}\n                                label={'Qo\\'shimcha kategoriya'}\n                                name={'title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Вы должны ввести дополнительная категория'}\n                                label={'Дополнительная категория Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label={'Выберите категория'}\n                                name={'category'}\n                                rules={[{\n                                    required: true, message: 'Страну должны быть выбраны'\n                                }]}\n                                wrapperCol={{\n                                    span: 24,\n                                }}\n                            >\n                                <Select\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    placeholder='Выберите одну категория'\n                                    optionLabelProp='label'\n                                    options={optionsCategory}\n                                />\n                            </Form.Item>\n\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label={'Выберите бренд'}\n                                name={'brand'}\n                                rules={[{\n                                    required: true, message: 'Бренд должны быть выбраны'\n                                }]}\n                                wrapperCol={{\n                                    span: 24,\n                                }}\n                            >\n                                <Select\n                                    mode=\"multiple\"\n                                    allowClear\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    placeholder='Выберите одну бренд'\n                                    optionLabelProp='label'\n                                    options={optionsBrand}\n                                />\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editSubCategorySuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default SubCategoryPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","title_uz","title_ru","category","brand","SubCategoryPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","data","categoryData","refetch","categoryFetch","useQuery","apiService","getData","enabled","brandData","brandFetch","mutate","postSubCategoryMutate","postSubCategory","isLoading","postSubCategoryLoading","isSuccess","postSubCategorySuccess","useMutation","url","postData","onSuccess","success","onError","error","obj","response","concat","editSubCategoryLoading","editSubCategoryData","editSubCategoryRefetch","editSubCategorySuccess","getDataByID","putSubCategory","putSubCategoryLoading","putData","putSubCategorySuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","_editSubCategoryData$","brands","map","item","push","edit","categories","console","log","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","optionsCategory","useMemo","option","value","optionsBrand","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","autoComplete","Row","gutter","Col","FormInput","Select","width","placeholder","optionLabelProp","options","mode","allowClear","Button","htmlType","marginTop"],"sourceRoot":""}